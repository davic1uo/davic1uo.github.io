<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on luo blog posts</title>
    <link>https://davic1uo.github.io/tags/shell/</link>
    <description>Recent content in shell on luo blog posts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Sep 2019 19:53:46 +0800</lastBuildDate>
    
	<atom:link href="https://davic1uo.github.io/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于export命令</title>
      <link>https://davic1uo.github.io/post/export-command/</link>
      <pubDate>Wed, 04 Sep 2019 19:53:46 +0800</pubDate>
      
      <guid>https://davic1uo.github.io/post/export-command/</guid>
      <description> 关于export命令 export命令是在POSIX定义了的: export is defined in POSIX定义中说
 export - set the export attribute for variables
 字面上理解是给变量(variable)设置对外的属性(export attribute). 在网上搜索export命令的作用, 都会有&amp;rdquo;设置环境变量&amp;rdquo;这个答案. *export attribute*和环境变量的目的我觉得其实是类似的.
假如在网上搜索&amp;rdquo;如何设置shell环境变量&amp;rdquo;时, 答案可能大概有这几种(假如要设置环境变量\$JAVA_HOME:
 直接在shell中执行export JAVA_HOME=/opt/jdk/jdk1.8.0_161 在/etc/profile中添加export JAVA_HOME=/opt/jdk/jdk1.8.0_161 在~/.bash_profile中添加export JAVA_HOME=/opt/jdk/jdk1.8.0_161  三种方式都可以设置\$JAVA_HOME环境变量.我的问题是, 既然写在文件里可以设置环境变量,那么执行(1)会把export JAVA_HOME=/opt/jdk/jdk1.8.0_161写到哪个文件去?
假如只执行(1)之后,如果再去查看~/.bash_profile和/etc/profile会发现里面并没有刚刚执行的内容.
这是由于export 并不向任何文件写内容.它的目标是当前进程的内存.
/etc/profile文件是针对所有用户的login shell1的配置文件.仅能被login shell读取.当l读取这个文件时,export的变量对所有用户都生效.
~/.bash_profile2是针对具体用户的login shell的配置文件
另外需要注意的是所有在shell中执行的命令都是当前shell的子进程. 所以自然地也就继承了主shell export的变量
 login shell 由很多种, 比如 bash, ksh, sh [return] 当login shell是bash时 [return]   </description>
    </item>
    
    <item>
      <title>Shell Important Files</title>
      <link>https://davic1uo.github.io/post/shell-important-files/</link>
      <pubDate>Wed, 04 Sep 2019 19:49:34 +0800</pubDate>
      
      <guid>https://davic1uo.github.io/post/shell-important-files/</guid>
      <description>关于shell的一些常见文件 在进行个性化shell配置的时候, 经常会遇到许多配置文件, 很容易混乱.这里梳理一下关于shell的配置文件.
 ~/.bashrc  针对不同用户的bash配置
 ~/.bash_profile  用于login shell的系统初始化文件(主要是环境变量)
 /etc/profile  针对所有用户的login shell的配置文件
 /etc/bashrc  所有用户的bash配置(主要是环境变量).会被~/.bashrc读取
# ~/.bashrc if [ -f /etc/bashrc ]; then . /etc/bashrc fi  配置文件的主要区别在
 login shell 还是 interactive-shell 是属于系统的还是属于个人用户的  login shell
类似*profile的文件都是属于被login shell所使用. 比如 ~/.profile ~/.bash_profile
 这些文件只在系统登陆时(login shell)被读取
 interactive shell
基本上所有的*rc文件都是用于交互式shell的配置文件. 比如~/.bashrc ~/.zshrc
 这些文件会每次在程序启动时被读取
 stackoverflow 上的回答
/etc属于系统
/etc/下的配置文件几乎都是属于系统的配置文件, 而在/home下(~)的配置文件则是属于个人用户的</description>
    </item>
    
  </channel>
</rss>